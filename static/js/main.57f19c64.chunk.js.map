{"version":3,"sources":["sortingAlgorithms/heapSort.js","sortingAlgorithms/mergeSort.js","components/SortingVisualizer.js","components/HeaderCategoryDropdown.js","components/Header.js","components/App.js","data.js","index.js"],"names":["array_length","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","heap_root","input","left","right","max","swap","index_A","index_B","temp","SortingVisualizer","props","useState","arr","setArr","color","setColor","randomIntFromInterval","min","random","mergeSort","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","console","log","setTimeout","backgroundColor","newHeight","width","useEffect","resetArray","algo","heap_Sort","barOneValue","barTwoValue","heapSort","className","map","value","idx","HeaderCategoryDropdown","class","categoryName","algos","onClick","handleSelectedAlgo","Header","searching","sorting","App","setAlgo","sortingAlgos","searchingAlgos","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.57f19c64.chunk.js","sourcesContent":["\r\n  var array_length;\r\n  /* to create MAX  array */  \r\n  function heap_root(input, i,animations) {\r\n      var left = 2 * i + 1;\r\n      var right = 2 * i + 2;\r\n      var max = i;\r\n  \r\n      if (left < array_length && input[left] > input[max]) {\r\n          max = left;\r\n      }\r\n  \r\n      if (right < array_length && input[right] > input[max])     {\r\n          max = right;\r\n      }\r\n  \r\n      if (max !== i) {\r\n          swap(input, i, max,animations);\r\n          heap_root(input, max,animations);\r\n      }\r\n  }\r\n  \r\n  function swap(input, index_A, index_B,animations) {\r\n      var temp = input[index_A];\r\n  \r\n      input[index_A] = input[index_B];\r\n      input[index_B] = temp;\r\n      animations.push([index_A,input[index_A],index_B,input[index_B]]);\r\n  }\r\n  \r\n  export function heap_Sort(input) {\r\n    const animations = [];\r\n      \r\n      array_length = input.length;\r\n  \r\n      for (var i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\r\n          heap_root(input, i,animations);\r\n        }\r\n  \r\n      for (i = input.length - 1; i > 0; i--) {\r\n          swap(input, 0, i,animations);\r\n          array_length--;\r\n        \r\n        \r\n          heap_root(input, 0,animations);\r\n      }\r\n      //return input;\r\n      return animations;\r\n  }\r\n  \r\n//   var arr = [3, 0, 2, 5, -1, 4, 1];\r\n//   heapSort(arr);\r\n//   console.log(arr);\r\n  ","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","import React, { useState, useEffect } from \"react\";\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSort.js';\r\nimport {heap_Sort} from '../sortingAlgorithms/heapSort.js';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 70;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n\r\nexport default function SortingVisualizer(props) {\r\n    const [arr, setArr] = useState([]);\r\n    const [color, setColor] = useState('turquoise');\r\n    useEffect(() => {\r\n        resetArray();\r\n      }, []);\r\n      useEffect(() => {\r\n        if(props.algo==='Merge Sort'){\r\n            mergeSort();\r\n        }\r\n        if(props.algo==='Bubble Sort'){\r\n          mergeSort();\r\n      }\r\n      if(props.algo==='Quick Sort'){\r\n        mergeSort();\r\n    }\r\n    if(props.algo==='Heap Sort'){\r\n      heapSort();\r\n  }\r\n      }, [props.algo]);\r\n    function resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n          array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        setArr(array);\r\n      }\r\n      function randomIntFromInterval(min, max) {\r\n        // min and max included\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n      }\r\n      function heapSort()\r\n      {\r\n        const animations= heap_Sort(arr);\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n         \r\n            setTimeout(() => {\r\n              const [barOneIdx, barOneValue, barTwoIdx, barTwoValue] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              barOneStyle.width = `${barTwoValue}px`;\r\n              barTwoStyle.width = `${barOneValue}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n            \r\n        }\r\n      }\r\n\r\n      function mergeSort() {\r\n        const animations = getMergeSortAnimations(arr);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            // const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setColor(i % 3 === 0 ? 'red' : 'yellow');\r\n            console.log(color);\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.width = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n      }\r\n      \r\n    \r\n    return (\r\n        <div className=\"items\">\r\n            {props.algo}\r\n            <ul className=\"items-list\">\r\n        {arr.map((value, idx) => (\r\n          <li>\r\n            <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              width: `${value}px`,\r\n            }}></div></li>\r\n        ))}\r\n       \r\n      </ul>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function HeaderCategoryDropdown(props) {  \r\n    return (\r\n            <div>\r\n                <div class=\"dropdown\">\r\n                <div class=\"dropbtn\">{`Choose a ${props.categoryName} algo`}</div>\r\n                <div class=\"dropdown-content\">\r\n                    {props.algos.map((algo) => {\r\n                    return (\r\n                    <button onClick={() => props.handleSelectedAlgo(algo)}>{algo}</button>\r\n                    );\r\n                })}\r\n                </div>\r\n                </div>\r\n                {/* <div class=\"\">\r\n                        <select  >\r\n                        <option value=\"select\">Select</option>\r\n                        {props.algos.map((algo) => {\r\n                                return (\r\n                                <option value={algo}>{algo}</option>\r\n                                );\r\n                            })}\r\n                        </select>\r\n                    </div> */}\r\n        \r\n            </div>  \r\n        \r\n            )\r\n\r\n    \r\n}\r\n","import React from \"react\";\r\nimport HeaderCategoryDropdown from \"./HeaderCategoryDropdown\";\r\n\r\nexport default function Header(props) {\r\n    const searching=props.searching;\r\n    const sorting=props.sorting;\r\n    const handleSelectedAlgo=props.handleSelectedAlgo;\r\n    return(\r\n            <header class=\"page-header\">         \r\n                <HeaderCategoryDropdown algos={searching} categoryName={'Search'} handleSelectedAlgo={handleSelectedAlgo}/>\r\n            <HeaderCategoryDropdown algos={sorting} categoryName={'Sort'} handleSelectedAlgo={handleSelectedAlgo}/>\r\n            </header>\r\n\r\n\r\n\r\n            \r\n\r\n        );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport SortingVisualizer from '../components/SortingVisualizer';\r\nimport Header from '../components/Header';\r\nimport { getSortingAlgosList } from '../data';\r\nimport { getSearchingAlgosList } from '../data';\r\n\r\nexport default function App() {\r\n    const [algo, setAlgo] = useState('');\r\n    const sortingAlgos= getSortingAlgosList();\r\n    const searchingAlgos= getSearchingAlgosList();\r\n    const handleSelectedAlgo = (algo) => {\r\n        console.log(algo);\r\n       setAlgo(algo);\r\n      \r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n        <Header sorting={sortingAlgos} searching={searchingAlgos} handleSelectedAlgo={handleSelectedAlgo} />\r\n  \r\n        <SortingVisualizer algo={algo}></SortingVisualizer>\r\n      </div>\r\n    );\r\n}\r\n","export function getSortingAlgosList(){\r\n    return [\r\n        'Heap Sort', 'Bubble Sort', 'Quick Sort', 'Merge Sort' ,\r\n    ]\r\n};\r\nexport function getSearchingAlgosList(){\r\n    return [\r\n        'Linear Seach', 'Binary Search',\r\n    ]\r\n};\r\n\r\nexport function getItems(){\r\n    return [\r\n      'Ikenna', 'Jesselyn Popoff','Jett Sklar','Josh MacSween','Katrina','Liliya Ingul','Lori Ann','Le Dung','Mark Tupala','MFiissel','Mrbrianlogan','Nadia','Noah Sutherland','Pablo','Pious George','Rendell Josephe','Surpreet','Serhii','Shivank Desai','Valerie','Yevheniia Tykhenko','Wang',  'Arezoo', 'Gavin Blumenshein','Haleh Bozorgnia', 'Haroon Mazhar'\r\n    ]\r\n};","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/app.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n    \r\n          <App />\r\n        ,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n"],"sourceRoot":""}